
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  avatarUrl: 'avatarUrl',
  isActive: 'isActive',
  placeId: 'placeId',
  governorate: 'governorate',
  governorateAr: 'governorateAr',
  delegation: 'delegation',
  delegationAr: 'delegationAr',
  city: 'city',
  state: 'state',
  country: 'country',
  postalCode: 'postalCode',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.AdministratorScalarFieldEnum = {
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  contactInfo: 'contactInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  location: 'location',
  contactInfo: 'contactInfo',
  registrationDate: 'registrationDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceProviderScalarFieldEnum = {
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  companyName: 'companyName',
  contactInfo: 'contactInfo',
  location: 'location',
  registrationDate: 'registrationDate',
  isValidated: 'isValidated',
  description: 'description',
  experienceYears: 'experienceYears',
  hourlyRate: 'hourlyRate',
  coverageRadius: 'coverageRadius',
  coverageType: 'coverageType',
  performanceStats: 'performanceStats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  validatedById: 'validatedById'
};

exports.Prisma.ProviderAreaScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  name: 'name',
  nameAr: 'nameAr',
  governorate: 'governorate',
  governorateAr: 'governorateAr',
  delegation: 'delegation',
  delegationAr: 'delegationAr',
  postalCode: 'postalCode',
  latitude: 'latitude',
  longitude: 'longitude',
  isActive: 'isActive',
  distance: 'distance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderSpecialtyScalarFieldEnum = {
  providerId: 'providerId',
  categoryId: 'categoryId'
};

exports.Prisma.ProfileMediaScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  caption: 'caption',
  isMainAvatar: 'isMainAvatar',
  uploadedAt: 'uploadedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  providerId: 'providerId',
  categoryId: 'categoryId',
  title: 'title',
  description: 'description',
  governorate: 'governorate',
  governorateAr: 'governorateAr',
  delegation: 'delegation',
  delegationAr: 'delegationAr',
  country: 'country',
  postalCode: 'postalCode',
  latitude: 'latitude',
  longitude: 'longitude',
  requestedDatetime: 'requestedDatetime',
  status: 'status',
  estimatedCost: 'estimatedCost',
  actualCost: 'actualCost',
  completionDate: 'completionDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  closedAt: 'closedAt',
  closedReason: 'closedReason'
};

exports.Prisma.JobMediaScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  caption: 'caption',
  uploadedAt: 'uploadedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobRequestScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  requesterId: 'requesterId',
  targetId: 'targetId',
  type: 'type',
  status: 'status',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  respondedAt: 'respondedAt'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  clientId: 'clientId',
  providerId: 'providerId',
  score: 'score',
  ratingDate: 'ratingDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  clientId: 'clientId',
  providerId: 'providerId',
  text: 'text',
  reviewDate: 'reviewDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  clientId: 'clientId',
  providerId: 'providerId',
  amount: 'amount',
  transactionDate: 'transactionDate',
  status: 'status',
  paymentMethodDetails: 'paymentMethodDetails',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  text: 'text',
  timestamp: 'timestamp',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CoverageType = exports.$Enums.CoverageType = {
  RADIUS: 'RADIUS',
  AREAS: 'AREAS',
  CUSTOM: 'CUSTOM'
};

exports.RequestType = exports.$Enums.RequestType = {
  CLIENT_TO_PROVIDER: 'CLIENT_TO_PROVIDER',
  PROVIDER_TO_CLIENT: 'PROVIDER_TO_CLIENT'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Administrator: 'Administrator',
  Client: 'Client',
  ServiceProvider: 'ServiceProvider',
  ProviderArea: 'ProviderArea',
  ServiceCategory: 'ServiceCategory',
  ProviderSpecialty: 'ProviderSpecialty',
  ProfileMedia: 'ProfileMedia',
  Job: 'Job',
  JobMedia: 'JobMedia',
  JobRequest: 'JobRequest',
  Rating: 'Rating',
  Review: 'Review',
  Transaction: 'Transaction',
  ChatMessage: 'ChatMessage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
