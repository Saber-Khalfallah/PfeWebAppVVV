export enum Role {
  CLIENT = "CLIENT",
  SERVICE_PROVIDER = "SERVICE_PROVIDER",
  ADMIN = "ADMIN",
}

export type SignUpFormState =
  | {
    data: {
      firstName?: string;
      lastName?: string; // from CreateUserDto (already present)
      email?: string; // from CreateUserDto (already present)
      password?: string;
      avatar?: string; // from CreateUserDto (already present)
      confirmPassword?: string; // from CreateUserDto (already present)
      role?: Role; // Added from CreateUserDto
      contactInfo?: string; // Added from CreateUserDto
      companyName?: string; // Added from CreateUserDto (for SERVICE_PROVIDER)
      location?: string;
      termsAccepted?: boolean; // Added for terms and conditions
    };
    errors?: {
      firstName?: string[];
      lastName?: string[]; // Added for lastName validation errors
      email?: string[];
      password?: string[];
      avatar?: string[]; // Added for avatar validation errors
      confirmPassword?: string[];
      role?: string[]; // Added for role validation errors
      contactInfo?: string[]; // Added for contactInfo validation errors
      companyName?: string[]; // Added for companyName validation errors
      location?: string[];
      termsAccepted?: string[]; // Added for terms and conditions validation errors
    };
    message?: string; // General form message (e.g., success or failure)
  }
  | undefined;

export enum JobStatusEnum {
  Open = "Open",
  Accepted = "Accepted",
  InProgress = "InProgress", // You might add more statuses
  Completed = "Completed",
  Cancelled = "Cancelled",
  Closed = "Closed", // Example of other statuses
}

export type JobFormState =
  | {
    data: {
      id?: string; // Usually generated by backend, optional in form
      clientId?: string;
      providerId?: string | null;
      categoryId?: string;
      createdAt?: string; // ISO string for DateTime input
      title?: string;
      description?: string;
      location?: string | null;
      requestedDatetime?: string; // ISO string for DateTime input
      status?: JobStatusEnum; // Use enum here
      estimatedCost?: string; // string for decimal input handling
      actualCost?: string | null;
      completionDate?: string | null;
      Media?: File[] | null; // Array of files for media uploads
      closedAt?: string | null;
      closedReason?: string | null;
    };
    errors?: {
      [key: string]: string[] | undefined;
      id?: string[];
      clientId?: string[];
      providerId?: string[];
      categoryId?: string[];
      createdAt?: string[];
      title?: string[];
      description?: string[];
      location?: string[];
      requestedDatetime?: string[];
      status?: string[];
      estimatedCost?: string[];
      actualCost?: string[];
      completionDate?: string[];
      Media?: string[];
      closedAt?: string[];
      closedReason?: string[];
    };
    message?: string; // General form message (e.g., success or failure)
    ok: boolean;
  }
  | undefined;
export interface JobFilters {
  searchTerm: string;
  status: JobStatusEnum | "All";
  dateRange: { from?: string; to?: string }; // Or a more specific date filter
  serviceType: string | "All";
}
